[project]
name = "pyduktape3"
version = "0.1.0"
description = "Yet another pyduktape fork written in Cython wrapped around duktape 3.0"
readme = "README.md"
authors = [
    { name = "Vizonex", email = "VizonexBusiness@gmail.com" }
]
requires-python = ">=3.9"


# [build-system]
# requires = [
#     "cython>=3.1.6",
#     "expandvars",
#     "setuptools >= 47",  # Minimum required for `version = attr:`
#     "tomli; python_version < '3.11'",
# ]
[build-system]
requires = ["setuptools", "cython"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-dir = {"" = "."}

ext-modules = [
{name = "pyduktape3._pyduktape3", sources = ["pyduktape3/_pyduktape3.pyx", "vendor/duktape.c", "vendor/duk_module_duktape.c"], include-dirs=['vendor']}
]
# backend-path = ["packaging"]  # requires `pip >= 20` or `pep517 >= 0.6.0`
# build-backend = "pep517_backend.hooks"  # wraps `setuptools.build_meta`

# [tool.setuptools]
# # ...


# [tool.local.cythonize]
# # This attr can contain multiple globs
# src = ["pyduktape3/*.pyx"]
# include-path=["vendor"]

# [tool.local.cythonize.env]
# # Env vars provisioned during cythonize call
# #CFLAGS = "-DCYTHON_TRACE=1 ${CFLAGS}"
# #LDFLAGS = "${LDFLAGS}"

# [tool.local.cythonize.flags]
# # This section can contain the following booleans:
# # * annotate — generate annotated HTML page for source files
# # * build — build extension modules using distutils
# # * inplace — build extension modules in place using distutils (implies -b)
# # * force — force recompilation
# # * quiet — be less verbose during compilation
# # * lenient — increase Python compat by ignoring some compile time errors
# # * keep-going — compile as much as possible, ignore compilation failures
# annotate = false
# build = false
# inplace = true
# force = true
# quiet = false
# lenient = false
# keep-going = false

# [tool.local.cythonize.kwargs]
# # This section can contain args that have values:
# # * exclude=PATTERN      exclude certain file patterns from the compilation
# # * parallel=N    run builds in N parallel jobs (default: calculated per system)
# # exclude = "**.py"
# # parallel = 12

# [tool.local.cythonize.kwargs.directive]
# # This section can contain compiler directives. Ref:
# # https://cython.rtfd.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives
# embedsignature = "True"
# emit_code_comments = "True"

# [tool.local.cythonize.kwargs.compile-time-env]
# # This section can contain compile time env vars

# [tool.local.cythonize.kwargs.option]
# # This section can contain cythonize options
# # Ref: https://github.com/cython/cython/blob/d6e6de9/Cython/Compiler/Options.py#L694-L730
# #docstrings = "True"
# #embed_pos_in_docstring = "True"
# #warning_errors = "True"
# #error_on_unknown_names = "True"
# #error_on_uninitialized = "True"

# [tool.cibuildwheel]
# enable = ["cpython-freethreading"]
# build-frontend = "build"
# before-test = [
#   # NOTE: Attempt to have pip pre-compile PyYAML wheel with our build
#   # NOTE: constraints unset. The hope is that pip will cache that wheel
#   # NOTE: and the test env provisioning stage will pick up PyYAML from
#   # NOTE: said cache rather than attempting to build it with a conflicting.
#   # NOTE: Version of Cython.
#   # Ref: https://github.com/pypa/cibuildwheel/issues/1666
#   "PIP_CONSTRAINT= pip install PyYAML",
# ]
# # test-requires = "-r requirements/ci-wheel.txt"
# # test-command = "pytest -v --no-cov {project}/tests"

# # don't build PyPy wheels, install from source instead
# skip = "pp*"

# [tool.cibuildwheel.environment]
# COLOR = "yes"
# FORCE_COLOR = "1"
# MYPY_FORCE_COLOR = "1"
# PIP_CONSTRAINT = "requirements/cython.txt"
# PRE_COMMIT_COLOR = "always"
# PY_COLORS = "1"

# [tool.cibuildwheel.config-settings]
# pure-python = "false"

# [tool.cibuildwheel.windows]
# before-test = []  # Windows cmd has different syntax and pip chooses wheels


